// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  user_token String    @unique
  projects   Project[]
  sections   Section[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("users")
}

model Project {
  id        Int       @id @default(autoincrement())
  name      String
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  sections  Section[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("projects")
}

model Section {
  id        Int      @id @default(autoincrement())
  User      User?    @relation(fields: [userToken], references: [user_token])
  userToken String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]

  @@map("sections")
}

model Vote {
  id Int @id @default(autoincrement())
  cardValue Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Section   Section? @relation(fields: [sectionId], references: [id])
  sectionId Int?

  @@map("votes")
}
