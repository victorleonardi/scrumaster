// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Revisit models. It must make sense but now it's a bit confusing
// Vote may probably make reference to user as well as round or section

// Define what is a section, what is a project, what is a user and others.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  userToken      String           @unique
  name           String?
  projects       UsersOnProject[]
  Project        Project[]
  votingSections VotingSection[]
  votes          Vote[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("users")
}

model UsersOnProject {
  id        Int      @id @default(autoincrement())
  User      User?    @relation(fields: [userToken], references: [userToken])
  userToken String?
  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usersOnProjects")
}

model Project {
  id             Int              @id @default(autoincrement())
  name           String
  users          UsersOnProject[]
  User           User?            @relation(fields: [userToken], references: [userToken])
  userToken      String?
  votingSections VotingSection[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("projects")
}

model VotingSection {
  id        Int      @id @default(autoincrement())
  User      User?    @relation(fields: [userToken], references: [userToken])
  userToken String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]

  @@map("votingSections")
}

model Vote {
  id              Int            @id @default(autoincrement())
  cardValue       Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  VotingSection   VotingSection? @relation(fields: [votingSectionId], references: [id])
  votingSectionId Int?
  User            User?          @relation(fields: [userToken], references: [userToken])
  userToken       String?

  @@map("votes")
}
